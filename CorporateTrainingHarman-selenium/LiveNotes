




Maven
==================

Selenium WebDriver
===========================
Selenium WebDriver it is an interface/API for WebUI automation Test

Project setup
==================
1.In Java project
-----------------------
1.create a java project
2.Download jar from selenium.dev
3.right click on project-->Build path--->Configure build path-->libraries
-->classPath--->add external Jar

2.Maven project
========================
Maven is build and project management tool

POM.xml
=============
Project Object Model this in  configuration file for project

	1.Dependencies
	2.plugins
	
	
Maven Support two Repository
===============================
1.Local Repository
user/m2 floder

2.Remote/central repository
mvnrepository.com

=====================================================================
TestCase: validate title of Google application 
step1: open application
step2: get the actual title 
step3: validate actual with expected
step4: display the result
step5: close the app

============================================
Selenium Exception
=======================
1.InvalidArgumentException: invalid argument
For wrong url address (protocol)

WebDriver Browser Commands
===========================
1.get()
2.getTitle()
3.getCurrentUrl()
4.getPageSource()
5.close()- close current open window
6.quit()- close all open windows by selenium
7.getWindowHandle()
8.getWindowHandles()


Navigation Commands
==========================
Selenium Provides Navigation interface

1.to(url)
==============
driver.navigate().to(url)

2.back()
==============
driver.navigate().back()

3.forward()
===============
driver.navigate().forward()

4.refresh()
================
driver.navigate().refresh()

=====================================================
How to automate any WebElement
=================================
What is WebElement
====================
Every GUI element is WebElement
Technically Selenium Provides WebElement as interface

1.Identify Webelement
2.Perform action on that WebElement

Selenium Identify Webelement using Locator
==============================================
What is Locator?
=============
Locator is address of WebElement from webpage

Selenium Support total 8 locators
====================================
1.By id(primary)
2.By name
3.By className
4.By linkText
5.By partialLinkText
6.By tagName

Dynamic Locators
-------------------
7.By cssSelector
8.By xpath


Step: 
Get the address of element using locator and use selenium method to identifyit

Identifiaction
==============================
1.findElement()
-----------------
- findElement will identify one single webelement
- findElement() returns WebElement interface object
- findElement() fail to identify any WebElement you will exception: NoSuchElementException

2.findElements()
---------------------
- findElements() will identify multiple webElements


WebElement validation commands
===============================
1.isDisplayed()
2.isEnabled()
3.isSelected()


Actions on Webelement
===========================
1.textbox,searchbox---->enter the data---->sendKeys("data",Keys.KeyboardKey)
2.button,link,checkbox,radio button--->click--->click()
3.Clear the text---->clear()


How to automate Link/Hyperlink?
========================================
<a href="url">text</a> 
<a id="SignIn" href="login.html">Sign In</a>
                                 link text
1.linkText(Full link text)
--------------------------
driver.findElement(By.linkText("Sign In"))

2.partialLinkText(partial link text)
----------------------------------------
driver.findElement(By.partialLinkText("In"))


=====================================================

ClassName
================
<button id="submit-id" class="btn btn-default btn-primary">Submit</button>

class="btn btn-default btn-primary"
		c1    c2          c3
		
InvalidSelectorException: Compound class names not permitted

===============================================
Selenium Wait
=====================
If there is time mapping issue between application and tool then it is called 
Synchronization issue

Selenium support Dynamic Wait
==================================
Wait is interface in selenium

1.Implicit
===================
- It is global wait
- As it applicable to every element

driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));


2.Explicit
=====================
- It is applicable to single webelement as per condition

We can implement
================
1.WebDriverWait class
2.FluentWait class


WebDriverWait(c) extends FluentWait(c) implements Wait(I)
================================================================
tagName locator
===================

Number of Input boxes
Number of links
Number of images


WebElement commands
=========================
1.getText()
------------------
- any visible text from application you can fetch using getText()
- any html inner text also we can fetch using getText()


2.getAttribute(attribute)
----------------------------------
It returns value property for that attribute

Assignment1: Get all the links from Naukari page


Dynamic locators
=========================
7. By cssSelector
=====================
cssSelector is locator to locate the elements based on element css properties.

css is cascaded style sheet is a language used to provide some style to the webelement

CssSelector is faster than xpath- as it travels from parent element to child element

1.tagname with id
--------------------
Syntax:
============
tagname#id

id="input-email"

input#input-email

2.tagname with attribute
----------------------------
Syntax:
================
tagname[attribute='value']

placeholder="Password"

input[placeholder='Password']


3.tagname with classname
---------------------------
Syntax:
============
tagname.classname

class="btn btn-primary"

input.btn.btn-primary


4.tagname with id,classname, attribute
----------------------------------------
tagname#id.classname[attribute='value']

input.btn.btn-primary[value='Login']

input#input-password.form-control
===========================================================
8.By xpath
==============
- path of webelement from xml/html webpage
- xpath always identify element for DOM(document object model)
===============HTML DOM=====================
<html>--------root node
<head>

</head>

<body>
<input>--------------element
<div>
<a>
</body>
</html>
=====================================
Types of Xpath
==================
1.Absolute xpath(full xpath)
==============================
- Absolute xpath always identify element from root node
- starts with '/'

/html/body/div[2]/div/div/div/div[2]/div/form/div[2]/input

2.Relative xpath(partial xpath)
=================================
- Relative xpath identify element from its relative property
- starts with '//'

//*[@id="input-password"]

*-any tagname
//input[@id='input-password']


Syntax:
===============
//tagname[@attribute='value']

==============================
xpath with operators
=====================
1.and
============
Syntax:
=========
//tagname[@attribute1='value' and @attribute2='value']

2.or
==============
Syntax:
=========
//tagname[@attribute1='value' or @attribute2='value']


xpath with indexing
==========================
Syntax:
==============
(xpath)[index]

position()
Syntax:
==============
(xpath)[position()=index]

=====================================

xpath methods
====================
1.text()- visible text(never ignore white space)
==========
Syntax:
===========
//tagname[text()='text']

2.normalize-space()- like trim() in String class-ignore white space
========================
Syntax:
===========
//tagname[normalize-space()='text']

3.contains()
===================
id="twotabsearchtextbox"

Syntax:
==============
//tagname[contains(@attribute,'partial value')]

or

//tagname[contains(text(),'partial text']

4.starts-with()prefix value

=====================
Syntax:
==============
//tagname[starts-with(@attribute,'partial value')]

or

//tagname[starts-with(text(),'partial text']

=============================================================

xpath axies
===================
1.following
=========================
after john all tr

Syntax:
===============
//tagname[attrubute='value']//following::tagname

//td[text()='John']//following::td.....13 elements match
//td[text()='John']//following::tr----------2 rows match



2.following-sibling
====================
Syntax:
===============
//tagname[attrubute='value']//following-sibling::tagname
//td[text()='John']//following-sibling::td

3.preceding
=====================
before john all rows

Syntax:
===============
//tagname[attrubute='value']//following-sibling::tagname

//td[text()='John']//preceding::tr---4 match

all data before john
//td[text()='John']//preceding::td----16 match


4.preceding-sibling
=======================

Syntax:
===============
//tagname[attrubute='value']//following-sibling::tagname

//td[text()='John']//preceding-sibling::td------1 match


Child
==================
Syntax:
===============
//tagname[attrubute='value']//child::tagname


//tbody//tr[4]//child::td

Parent
==============
Syntax:
===============
//tagname[attrubute='value']//parent::tagname

     <tbody>-------G.parent for John
     <tr>------parent for John
 
         <td>4</td>-----preceding sibling

          <td>John</td>---------------element

          <td>Robinson</td>----following sibling

          <td>jr5527</td>
 
         <td>
              <a href="user.html"><i class="icon-pencil"></i></a>
              <a role="button" href="#myModal" data-toggle="modal"><i class="icon-remove"></i></a>
          </td>

        </tr>
        
        </tbody>


============================================================
Dropdown automation
=======================
1.Dropdown based on Select tag
==============================

Selenium provides Select class
Select sc=new Select(dropdown ele address);

1.isMultiple()

single selection
=====================
selectByIndex(int)
selectByValue(string)
selectByVisibleText(string)

get all the options
=========================
getOptions()- return List<WebElement>


2.Bootstrap/Javascript 
=====================
xpath

Automate Redbus dropdown
Automate Gibibo application both dropdown
=======================================
Multiple Windows in selenium
==========================
-getWindowHandle()
-getWindowHandles()
-switchTo()

Selenium 4 -newWindow()
=========================
newTab

newWindow

WebDriver driver2=driver.switchTo().newWindow(WindowType.TAB);


====================================================================
Alert handling
===================
Selenium supports Alert interface to handle alerts

Types
===========
1.Simple alert---Ok
2.confirmation alert--->ok and cancel
3.Prompt based alert--->sending data

1.accept(): Ok
2.dismiss(): cancel
4.getText(): to get the text of the alert
5.sendKeys(): to send data

Basic Authentication popup
=================================
https://username:password@the-internet.herokuapp.com/basic_auth
=================================================================
Frame handling
======================
<frame> or <iframe>

1.driver.switchTo().frame(index)
2.driver.switchTo().frame(id/name)
3.driver.switchTo().frame(frame WebElement)
4.parentFrame()

defaultContent()
===============================================
Actions class-Mouse operation
===================================
done

JavascriptExecutor interface
=================================
Scroll
refresh
title
click

ExplicitWait
================

Framework
================
1.TestNG

priority
invocationCount
description
dependsOnMethod
=====================
How to ignore any test execution
===================================
1.using argument enabled=false
2.using testng.xml file

Assertion in Testng
=========================
validate current state of application
1.HardAssertion- Assert class
2.SoftAssertion- SoftAssert class


Xml file
==============
Pass test data from xml
=================
	1.@parameters
parallel execution
grouping
Mthods
create test suite


Test Data/Properties
=======================
1.@Parameters
2.Properties File

Annotations(Rule)
====================

Preconditions
@Before

Testcase

postcondition
@After

How to implement Object repository in Seleium
==================================================
1.Properties file

2.Page Object Model

Page Object
Data driven Testing
Apache POI
Screenshot

Hybrid Driven Framework
==========================
design
============
Page Object
Test Cases
Base class
configuration
Test data


execute
=============
1.using pom.xml
2.using CLI
3.using Jenkins-cicd



reports
==============
testng reports
Extent reports







2.Cucumber
































































































































